// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: dev/unmango/v1alpha1/versions.proto

package unmangov1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/unstoppablemango/minecraft-manager/api/dev/unmango/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VersionsServiceName is the fully-qualified name of the VersionsService service.
	VersionsServiceName = "dev.unmango.v1alpha1.VersionsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VersionsServiceListProcedure is the fully-qualified name of the VersionsService's List RPC.
	VersionsServiceListProcedure = "/dev.unmango.v1alpha1.VersionsService/List"
)

// VersionsServiceClient is a client for the dev.unmango.v1alpha1.VersionsService service.
type VersionsServiceClient interface {
	List(context.Context, *connect.Request[v1alpha1.ListRequest]) (*connect.Response[v1alpha1.ListResponse], error)
}

// NewVersionsServiceClient constructs a client for the dev.unmango.v1alpha1.VersionsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVersionsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VersionsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	versionsServiceMethods := v1alpha1.File_dev_unmango_v1alpha1_versions_proto.Services().ByName("VersionsService").Methods()
	return &versionsServiceClient{
		list: connect.NewClient[v1alpha1.ListRequest, v1alpha1.ListResponse](
			httpClient,
			baseURL+VersionsServiceListProcedure,
			connect.WithSchema(versionsServiceMethods.ByName("List")),
			connect.WithClientOptions(opts...),
		),
	}
}

// versionsServiceClient implements VersionsServiceClient.
type versionsServiceClient struct {
	list *connect.Client[v1alpha1.ListRequest, v1alpha1.ListResponse]
}

// List calls dev.unmango.v1alpha1.VersionsService.List.
func (c *versionsServiceClient) List(ctx context.Context, req *connect.Request[v1alpha1.ListRequest]) (*connect.Response[v1alpha1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// VersionsServiceHandler is an implementation of the dev.unmango.v1alpha1.VersionsService service.
type VersionsServiceHandler interface {
	List(context.Context, *connect.Request[v1alpha1.ListRequest]) (*connect.Response[v1alpha1.ListResponse], error)
}

// NewVersionsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVersionsServiceHandler(svc VersionsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	versionsServiceMethods := v1alpha1.File_dev_unmango_v1alpha1_versions_proto.Services().ByName("VersionsService").Methods()
	versionsServiceListHandler := connect.NewUnaryHandler(
		VersionsServiceListProcedure,
		svc.List,
		connect.WithSchema(versionsServiceMethods.ByName("List")),
		connect.WithHandlerOptions(opts...),
	)
	return "/dev.unmango.v1alpha1.VersionsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VersionsServiceListProcedure:
			versionsServiceListHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVersionsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedVersionsServiceHandler struct{}

func (UnimplementedVersionsServiceHandler) List(context.Context, *connect.Request[v1alpha1.ListRequest]) (*connect.Response[v1alpha1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("dev.unmango.v1alpha1.VersionsService.List is not implemented"))
}
